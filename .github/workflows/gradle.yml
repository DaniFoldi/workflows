name: Reusable Gradle action

on:
  workflow_call:
    inputs:
      steps:
        required: true
        type: string
      java-version:
        required: true
        type: number
      java-distribution:
        default: "temurin"
        type: string
      directory:
        default: "."
        type: string
      github-release-files:
        default: ""
        type: string
      add-gradle-properties:
        default: false
        type: boolean
    secrets:
      gradle-properties:
        required: false
      github-token:
        required: false

jobs:
  gradle-action:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v2

      - name: "Setup jdk"
        uses: actions/setup-java@v2
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}

      - name: "Cache gradle dependencies"
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: "Inject gradle properties"
        if: inputs.add-gradle-properties
        run: |
          if [ ! -e "${{ inputs.directory }}/gradle.properties" ]
          then
            touch ${{ inputs.directory }}/gradle.properties
          fi
          echo "${{ secrets.gradle-properties }}" >> ${{ inputs.directory }}/gradle.properties

      - name: "Refresh gradle dependencies"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: --refresh-dependencies
          build-root-directory: ${{ inputs.directory }}

      - name: "Run gradle build steps"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: ${{ inputs.steps }}
          build-root-directory: ${{ inputs.directory }}

      - name: "Get release version from gradle"
        id: get-version
        run: |
          echo "::set-output name=version::$(cat ${{ inputs.directory }}/build.gradle | sed -rn "s/^version\s*=?\s*\(?\s*('|\")(.*)('|\")\s*\)?$/\2/p" | head -n 1)"

      - name: "Tag latest commit"
        if: inputs.github-release-files != ''
        run: |
          echo ${{ secrets.github-token }} | gh auth login --with-token
          gh auth setup-git
          git tag "v${{ steps.get-version.outputs.version }}" -a -m "${{ github.event.commits[0].message }}"
          git push origin "v${{ steps.get-version.outputs.version }}"

      - name: "Archive source az zip and tar.gz"
        if: inputs.github-release-files != ''
        run: |
          git ls-tree --full-tree -r --name-only HEAD > archive-files.txt
          cat archive-files.txt | zip -q@T "${{ github.event.repository.name }}-${{ steps.get-version.outputs.version }}.zip"
          tar -czf ${{ github.event.repository.name }}-${{ steps.get-version.outputs.version }}.tar.gz -T archive-files.txt

      - name: "Create draft GitHub release"
        if: inputs.github-release-files != ''
        run: |
          gh release create -d --generate-notes "v${{ steps.get-version.outputs.version }}" ${{ inputs.directory }}/${{ inputs.github-release-files }} "${{ github.event.repository.name }}-${{ steps.get-version.outputs.version }}.tar.gz#Source code" "${{ github.event.repository.name }}-${{ steps.get-version.outputs.version }}.zip#Source code"

      - name: "Stop gradle daemon"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: --stop
          build-root-directory: ${{ inputs.directory }}
